// @generated by protoc-gen-es v2.5.1 with parameter "target=js+dts"
// @generated from file bbq/intake/v1/bbq.proto (package bbq.intake.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file bbq/intake/v1/bbq.proto.
 */
export declare const file_bbq_intake_v1_bbq: GenFile;

/**
 * @generated from message bbq.intake.v1.Sensor
 */
export declare type Sensor = Message<"bbq.intake.v1.Sensor"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string manufacturer = 2;
   */
  manufacturer: string;

  /**
   * @generated from field: int32 sensor_count = 3;
   */
  sensorCount: number;

  /**
   * @generated from field: string temperature_unit = 4;
   */
  temperatureUnit: string;

  /**
   * @generated from field: string sensor_id = 5;
   */
  sensorId: string;
};

/**
 * Describes the message bbq.intake.v1.Sensor.
 * Use `create(SensorSchema)` to create a new message.
 */
export declare const SensorSchema: GenMessage<Sensor>;

/**
 * @generated from message bbq.intake.v1.SensorReading
 */
export declare type SensorReading = Message<"bbq.intake.v1.SensorReading"> & {
  /**
   * @generated from field: int32 sensor_number = 1;
   */
  sensorNumber: number;

  /**
   * @generated from field: float temperature = 2;
   */
  temperature: number;
};

/**
 * Describes the message bbq.intake.v1.SensorReading.
 * Use `create(SensorReadingSchema)` to create a new message.
 */
export declare const SensorReadingSchema: GenMessage<SensorReading>;

/**
 * @generated from message bbq.intake.v1.Reading
 */
export declare type Reading = Message<"bbq.intake.v1.Reading"> & {
  /**
   * @generated from field: string session_id = 1;
   */
  sessionId: string;

  /**
   * @generated from field: repeated bbq.intake.v1.SensorReading readings = 2;
   */
  readings: SensorReading[];

  /**
   * @generated from field: int64 recorded_at = 3;
   */
  recordedAt: bigint;
};

/**
 * Describes the message bbq.intake.v1.Reading.
 * Use `create(ReadingSchema)` to create a new message.
 */
export declare const ReadingSchema: GenMessage<Reading>;

/**
 * @generated from message bbq.intake.v1.SessionDataRate
 */
export declare type SessionDataRate = Message<"bbq.intake.v1.SessionDataRate"> & {
  /**
   * @generated from field: int32 sensors = 1;
   */
  sensors: number;

  /**
   * @generated from field: int32 max_readings_minute = 2;
   */
  maxReadingsMinute: number;
};

/**
 * Describes the message bbq.intake.v1.SessionDataRate.
 * Use `create(SessionDataRateSchema)` to create a new message.
 */
export declare const SessionDataRateSchema: GenMessage<SessionDataRate>;

/**
 * @generated from message bbq.intake.v1.SensorAlert
 */
export declare type SensorAlert = Message<"bbq.intake.v1.SensorAlert"> & {
  /**
   * @generated from field: optional string id = 1;
   */
  id?: string;

  /**
   * @generated from field: string sensor_id = 2;
   */
  sensorId: string;

  /**
   * @generated from field: string alert_name = 3;
   */
  alertName: string;

  /**
   * @generated from field: bool default_alert = 4;
   */
  defaultAlert: boolean;
};

/**
 * Describes the message bbq.intake.v1.SensorAlert.
 * Use `create(SensorAlertSchema)` to create a new message.
 */
export declare const SensorAlertSchema: GenMessage<SensorAlert>;

/**
 * @generated from message bbq.intake.v1.SensorAlertRule
 */
export declare type SensorAlertRule = Message<"bbq.intake.v1.SensorAlertRule"> & {
  /**
   * @generated from field: string sensor_alert_id = 1;
   */
  sensorAlertId: string;

  /**
   * @generated from field: int32 sensor_number = 2;
   */
  sensorNumber: number;

  /**
   * @generated from field: float min_temperature = 3;
   */
  minTemperature: number;

  /**
   * @generated from field: float max_temperature = 4;
   */
  maxTemperature: number;
};

/**
 * Describes the message bbq.intake.v1.SensorAlertRule.
 * Use `create(SensorAlertRuleSchema)` to create a new message.
 */
export declare const SensorAlertRuleSchema: GenMessage<SensorAlertRule>;

/**
 * @generated from message bbq.intake.v1.Session
 */
export declare type Session = Message<"bbq.intake.v1.Session"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string device_id = 2;
   */
  deviceId: string;

  /**
   * @generated from field: string desired_state = 3;
   */
  desiredState: string;

  /**
   * @generated from field: string description = 4;
   */
  description: string;

  /**
   * @generated from field: int64 start_time = 5;
   */
  startTime: bigint;

  /**
   * @generated from field: optional int64 end_time = 6;
   */
  endTime?: bigint;

  /**
   * @generated from field: string sensor_id = 7;
   */
  sensorId: string;

  /**
   * @generated from field: string session_type = 8;
   */
  sessionType: string;

  /**
   * @generated from field: string subject_id = 9;
   */
  subjectId: string;

  /**
   * @generated from field: optional string sensor_alert_id = 10;
   */
  sensorAlertId?: string;
};

/**
 * Describes the message bbq.intake.v1.Session.
 * Use `create(SessionSchema)` to create a new message.
 */
export declare const SessionSchema: GenMessage<Session>;

