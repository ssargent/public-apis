// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sensor {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub manufacturer: ::prost::alloc::string::String,
    #[prost(int32, tag="3")]
    pub sensor_count: i32,
    #[prost(string, tag="4")]
    pub temperature_unit: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub sensor_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SensorReading {
    #[prost(int32, tag="1")]
    pub sensor_number: i32,
    #[prost(float, tag="2")]
    pub temperature: f32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Reading {
    #[prost(string, tag="1")]
    pub session_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="2")]
    pub readings: ::prost::alloc::vec::Vec<SensorReading>,
    #[prost(int64, tag="3")]
    pub recorded_at: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SessionDataRate {
    #[prost(int32, tag="1")]
    pub sensors: i32,
    #[prost(int32, tag="2")]
    pub max_readings_minute: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SensorAlert {
    #[prost(string, optional, tag="1")]
    pub id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag="2")]
    pub sensor_id: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub alert_name: ::prost::alloc::string::String,
    #[prost(bool, tag="4")]
    pub default_alert: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SensorAlertRule {
    #[prost(string, tag="1")]
    pub sensor_alert_id: ::prost::alloc::string::String,
    #[prost(int32, tag="2")]
    pub sensor_number: i32,
    #[prost(float, tag="3")]
    pub min_temperature: f32,
    #[prost(float, tag="4")]
    pub max_temperature: f32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Session {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub device_id: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub desired_state: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub description: ::prost::alloc::string::String,
    #[prost(int64, tag="5")]
    pub start_time: i64,
    #[prost(int64, optional, tag="6")]
    pub end_time: ::core::option::Option<i64>,
    #[prost(string, tag="7")]
    pub sensor_id: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub session_type: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub subject_id: ::prost::alloc::string::String,
    #[prost(string, optional, tag="10")]
    pub sensor_alert_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordRequest {
    #[prost(message, repeated, tag="1")]
    pub reading: ::prost::alloc::vec::Vec<Reading>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordResponse {
    #[prost(string, tag="1")]
    pub session_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub recorded_at: ::core::option::Option<::pbjson_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SessionRequest {
    #[prost(string, tag="1")]
    pub description: ::prost::alloc::string::String,
    #[prost(string, optional, tag="2")]
    pub device_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="3")]
    pub sensor_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="4")]
    pub subject_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="5")]
    pub desired_state: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SessionResponse {
    #[prost(message, optional, tag="1")]
    pub session: ::core::option::Option<Session>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateSensorAlertRequest {
    #[prost(message, optional, tag="1")]
    pub sensor_alert: ::core::option::Option<SensorAlert>,
    #[prost(message, repeated, tag="2")]
    pub rules: ::prost::alloc::vec::Vec<SensorAlertRule>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateSensorAlertResponse {
    #[prost(message, optional, tag="1")]
    pub sensor_alert: ::core::option::Option<SensorAlert>,
}
include!("bbq.intake.v1.tonic.rs");
// @@protoc_insertion_point(module)