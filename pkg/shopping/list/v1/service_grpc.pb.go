// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: shopping/list/v1/service.proto

package listv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShoppingListService_CreateList_FullMethodName     = "/shopping.list.v1.ShoppingListService/CreateList"
	ShoppingListService_CloneList_FullMethodName      = "/shopping.list.v1.ShoppingListService/CloneList"
	ShoppingListService_AddToList_FullMethodName      = "/shopping.list.v1.ShoppingListService/AddToList"
	ShoppingListService_RemoveFromList_FullMethodName = "/shopping.list.v1.ShoppingListService/RemoveFromList"
	ShoppingListService_GetList_FullMethodName        = "/shopping.list.v1.ShoppingListService/GetList"
	ShoppingListService_MergeList_FullMethodName      = "/shopping.list.v1.ShoppingListService/MergeList"
)

// ShoppingListServiceClient is the client API for ShoppingListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShoppingListServiceClient interface {
	CreateList(ctx context.Context, in *CreateListRequest, opts ...grpc.CallOption) (*CreateListResponse, error)
	CloneList(ctx context.Context, in *CloneListRequest, opts ...grpc.CallOption) (*CloneListResponse, error)
	AddToList(ctx context.Context, in *AddToListRequest, opts ...grpc.CallOption) (*AddToListResponse, error)
	RemoveFromList(ctx context.Context, in *RemoveFromListRequest, opts ...grpc.CallOption) (*RemoveFromListResponse, error)
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	MergeList(ctx context.Context, in *MergeListRequest, opts ...grpc.CallOption) (*MergeListResponse, error)
}

type shoppingListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShoppingListServiceClient(cc grpc.ClientConnInterface) ShoppingListServiceClient {
	return &shoppingListServiceClient{cc}
}

func (c *shoppingListServiceClient) CreateList(ctx context.Context, in *CreateListRequest, opts ...grpc.CallOption) (*CreateListResponse, error) {
	out := new(CreateListResponse)
	err := c.cc.Invoke(ctx, ShoppingListService_CreateList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingListServiceClient) CloneList(ctx context.Context, in *CloneListRequest, opts ...grpc.CallOption) (*CloneListResponse, error) {
	out := new(CloneListResponse)
	err := c.cc.Invoke(ctx, ShoppingListService_CloneList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingListServiceClient) AddToList(ctx context.Context, in *AddToListRequest, opts ...grpc.CallOption) (*AddToListResponse, error) {
	out := new(AddToListResponse)
	err := c.cc.Invoke(ctx, ShoppingListService_AddToList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingListServiceClient) RemoveFromList(ctx context.Context, in *RemoveFromListRequest, opts ...grpc.CallOption) (*RemoveFromListResponse, error) {
	out := new(RemoveFromListResponse)
	err := c.cc.Invoke(ctx, ShoppingListService_RemoveFromList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingListServiceClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, ShoppingListService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingListServiceClient) MergeList(ctx context.Context, in *MergeListRequest, opts ...grpc.CallOption) (*MergeListResponse, error) {
	out := new(MergeListResponse)
	err := c.cc.Invoke(ctx, ShoppingListService_MergeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShoppingListServiceServer is the server API for ShoppingListService service.
// All implementations must embed UnimplementedShoppingListServiceServer
// for forward compatibility
type ShoppingListServiceServer interface {
	CreateList(context.Context, *CreateListRequest) (*CreateListResponse, error)
	CloneList(context.Context, *CloneListRequest) (*CloneListResponse, error)
	AddToList(context.Context, *AddToListRequest) (*AddToListResponse, error)
	RemoveFromList(context.Context, *RemoveFromListRequest) (*RemoveFromListResponse, error)
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	MergeList(context.Context, *MergeListRequest) (*MergeListResponse, error)
	mustEmbedUnimplementedShoppingListServiceServer()
}

// UnimplementedShoppingListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShoppingListServiceServer struct {
}

func (UnimplementedShoppingListServiceServer) CreateList(context.Context, *CreateListRequest) (*CreateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateList not implemented")
}
func (UnimplementedShoppingListServiceServer) CloneList(context.Context, *CloneListRequest) (*CloneListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneList not implemented")
}
func (UnimplementedShoppingListServiceServer) AddToList(context.Context, *AddToListRequest) (*AddToListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToList not implemented")
}
func (UnimplementedShoppingListServiceServer) RemoveFromList(context.Context, *RemoveFromListRequest) (*RemoveFromListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromList not implemented")
}
func (UnimplementedShoppingListServiceServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedShoppingListServiceServer) MergeList(context.Context, *MergeListRequest) (*MergeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeList not implemented")
}
func (UnimplementedShoppingListServiceServer) mustEmbedUnimplementedShoppingListServiceServer() {}

// UnsafeShoppingListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShoppingListServiceServer will
// result in compilation errors.
type UnsafeShoppingListServiceServer interface {
	mustEmbedUnimplementedShoppingListServiceServer()
}

func RegisterShoppingListServiceServer(s grpc.ServiceRegistrar, srv ShoppingListServiceServer) {
	s.RegisterService(&ShoppingListService_ServiceDesc, srv)
}

func _ShoppingListService_CreateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingListServiceServer).CreateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingListService_CreateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingListServiceServer).CreateList(ctx, req.(*CreateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingListService_CloneList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingListServiceServer).CloneList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingListService_CloneList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingListServiceServer).CloneList(ctx, req.(*CloneListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingListService_AddToList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingListServiceServer).AddToList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingListService_AddToList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingListServiceServer).AddToList(ctx, req.(*AddToListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingListService_RemoveFromList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingListServiceServer).RemoveFromList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingListService_RemoveFromList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingListServiceServer).RemoveFromList(ctx, req.(*RemoveFromListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingListService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingListServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingListService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingListServiceServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingListService_MergeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingListServiceServer).MergeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingListService_MergeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingListServiceServer).MergeList(ctx, req.(*MergeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShoppingListService_ServiceDesc is the grpc.ServiceDesc for ShoppingListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShoppingListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shopping.list.v1.ShoppingListService",
	HandlerType: (*ShoppingListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateList",
			Handler:    _ShoppingListService_CreateList_Handler,
		},
		{
			MethodName: "CloneList",
			Handler:    _ShoppingListService_CloneList_Handler,
		},
		{
			MethodName: "AddToList",
			Handler:    _ShoppingListService_AddToList_Handler,
		},
		{
			MethodName: "RemoveFromList",
			Handler:    _ShoppingListService_RemoveFromList_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _ShoppingListService_GetList_Handler,
		},
		{
			MethodName: "MergeList",
			Handler:    _ShoppingListService_MergeList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shopping/list/v1/service.proto",
}
