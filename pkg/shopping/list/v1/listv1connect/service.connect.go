// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: shopping/list/v1/service.proto

package listv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/ssargent/apis/pkg/shopping/list/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ShoppingListServiceName is the fully-qualified name of the ShoppingListService service.
	ShoppingListServiceName = "shopping.list.v1.ShoppingListService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ShoppingListServiceCreateListProcedure is the fully-qualified name of the ShoppingListService's
	// CreateList RPC.
	ShoppingListServiceCreateListProcedure = "/shopping.list.v1.ShoppingListService/CreateList"
	// ShoppingListServiceCloneListProcedure is the fully-qualified name of the ShoppingListService's
	// CloneList RPC.
	ShoppingListServiceCloneListProcedure = "/shopping.list.v1.ShoppingListService/CloneList"
	// ShoppingListServiceAddToListProcedure is the fully-qualified name of the ShoppingListService's
	// AddToList RPC.
	ShoppingListServiceAddToListProcedure = "/shopping.list.v1.ShoppingListService/AddToList"
	// ShoppingListServiceRemoveFromListProcedure is the fully-qualified name of the
	// ShoppingListService's RemoveFromList RPC.
	ShoppingListServiceRemoveFromListProcedure = "/shopping.list.v1.ShoppingListService/RemoveFromList"
	// ShoppingListServiceGetListProcedure is the fully-qualified name of the ShoppingListService's
	// GetList RPC.
	ShoppingListServiceGetListProcedure = "/shopping.list.v1.ShoppingListService/GetList"
	// ShoppingListServiceMergeListProcedure is the fully-qualified name of the ShoppingListService's
	// MergeList RPC.
	ShoppingListServiceMergeListProcedure = "/shopping.list.v1.ShoppingListService/MergeList"
)

// ShoppingListServiceClient is a client for the shopping.list.v1.ShoppingListService service.
type ShoppingListServiceClient interface {
	CreateList(context.Context, *connect_go.Request[v1.CreateListRequest]) (*connect_go.Response[v1.CreateListResponse], error)
	CloneList(context.Context, *connect_go.Request[v1.CloneListRequest]) (*connect_go.Response[v1.CloneListResponse], error)
	AddToList(context.Context, *connect_go.Request[v1.AddToListRequest]) (*connect_go.Response[v1.AddToListResponse], error)
	RemoveFromList(context.Context, *connect_go.Request[v1.RemoveFromListRequest]) (*connect_go.Response[v1.RemoveFromListResponse], error)
	GetList(context.Context, *connect_go.Request[v1.GetListRequest]) (*connect_go.Response[v1.GetListResponse], error)
	MergeList(context.Context, *connect_go.Request[v1.MergeListRequest]) (*connect_go.Response[v1.MergeListResponse], error)
}

// NewShoppingListServiceClient constructs a client for the shopping.list.v1.ShoppingListService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewShoppingListServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ShoppingListServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &shoppingListServiceClient{
		createList: connect_go.NewClient[v1.CreateListRequest, v1.CreateListResponse](
			httpClient,
			baseURL+ShoppingListServiceCreateListProcedure,
			opts...,
		),
		cloneList: connect_go.NewClient[v1.CloneListRequest, v1.CloneListResponse](
			httpClient,
			baseURL+ShoppingListServiceCloneListProcedure,
			opts...,
		),
		addToList: connect_go.NewClient[v1.AddToListRequest, v1.AddToListResponse](
			httpClient,
			baseURL+ShoppingListServiceAddToListProcedure,
			opts...,
		),
		removeFromList: connect_go.NewClient[v1.RemoveFromListRequest, v1.RemoveFromListResponse](
			httpClient,
			baseURL+ShoppingListServiceRemoveFromListProcedure,
			opts...,
		),
		getList: connect_go.NewClient[v1.GetListRequest, v1.GetListResponse](
			httpClient,
			baseURL+ShoppingListServiceGetListProcedure,
			opts...,
		),
		mergeList: connect_go.NewClient[v1.MergeListRequest, v1.MergeListResponse](
			httpClient,
			baseURL+ShoppingListServiceMergeListProcedure,
			opts...,
		),
	}
}

// shoppingListServiceClient implements ShoppingListServiceClient.
type shoppingListServiceClient struct {
	createList     *connect_go.Client[v1.CreateListRequest, v1.CreateListResponse]
	cloneList      *connect_go.Client[v1.CloneListRequest, v1.CloneListResponse]
	addToList      *connect_go.Client[v1.AddToListRequest, v1.AddToListResponse]
	removeFromList *connect_go.Client[v1.RemoveFromListRequest, v1.RemoveFromListResponse]
	getList        *connect_go.Client[v1.GetListRequest, v1.GetListResponse]
	mergeList      *connect_go.Client[v1.MergeListRequest, v1.MergeListResponse]
}

// CreateList calls shopping.list.v1.ShoppingListService.CreateList.
func (c *shoppingListServiceClient) CreateList(ctx context.Context, req *connect_go.Request[v1.CreateListRequest]) (*connect_go.Response[v1.CreateListResponse], error) {
	return c.createList.CallUnary(ctx, req)
}

// CloneList calls shopping.list.v1.ShoppingListService.CloneList.
func (c *shoppingListServiceClient) CloneList(ctx context.Context, req *connect_go.Request[v1.CloneListRequest]) (*connect_go.Response[v1.CloneListResponse], error) {
	return c.cloneList.CallUnary(ctx, req)
}

// AddToList calls shopping.list.v1.ShoppingListService.AddToList.
func (c *shoppingListServiceClient) AddToList(ctx context.Context, req *connect_go.Request[v1.AddToListRequest]) (*connect_go.Response[v1.AddToListResponse], error) {
	return c.addToList.CallUnary(ctx, req)
}

// RemoveFromList calls shopping.list.v1.ShoppingListService.RemoveFromList.
func (c *shoppingListServiceClient) RemoveFromList(ctx context.Context, req *connect_go.Request[v1.RemoveFromListRequest]) (*connect_go.Response[v1.RemoveFromListResponse], error) {
	return c.removeFromList.CallUnary(ctx, req)
}

// GetList calls shopping.list.v1.ShoppingListService.GetList.
func (c *shoppingListServiceClient) GetList(ctx context.Context, req *connect_go.Request[v1.GetListRequest]) (*connect_go.Response[v1.GetListResponse], error) {
	return c.getList.CallUnary(ctx, req)
}

// MergeList calls shopping.list.v1.ShoppingListService.MergeList.
func (c *shoppingListServiceClient) MergeList(ctx context.Context, req *connect_go.Request[v1.MergeListRequest]) (*connect_go.Response[v1.MergeListResponse], error) {
	return c.mergeList.CallUnary(ctx, req)
}

// ShoppingListServiceHandler is an implementation of the shopping.list.v1.ShoppingListService
// service.
type ShoppingListServiceHandler interface {
	CreateList(context.Context, *connect_go.Request[v1.CreateListRequest]) (*connect_go.Response[v1.CreateListResponse], error)
	CloneList(context.Context, *connect_go.Request[v1.CloneListRequest]) (*connect_go.Response[v1.CloneListResponse], error)
	AddToList(context.Context, *connect_go.Request[v1.AddToListRequest]) (*connect_go.Response[v1.AddToListResponse], error)
	RemoveFromList(context.Context, *connect_go.Request[v1.RemoveFromListRequest]) (*connect_go.Response[v1.RemoveFromListResponse], error)
	GetList(context.Context, *connect_go.Request[v1.GetListRequest]) (*connect_go.Response[v1.GetListResponse], error)
	MergeList(context.Context, *connect_go.Request[v1.MergeListRequest]) (*connect_go.Response[v1.MergeListResponse], error)
}

// NewShoppingListServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewShoppingListServiceHandler(svc ShoppingListServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	shoppingListServiceCreateListHandler := connect_go.NewUnaryHandler(
		ShoppingListServiceCreateListProcedure,
		svc.CreateList,
		opts...,
	)
	shoppingListServiceCloneListHandler := connect_go.NewUnaryHandler(
		ShoppingListServiceCloneListProcedure,
		svc.CloneList,
		opts...,
	)
	shoppingListServiceAddToListHandler := connect_go.NewUnaryHandler(
		ShoppingListServiceAddToListProcedure,
		svc.AddToList,
		opts...,
	)
	shoppingListServiceRemoveFromListHandler := connect_go.NewUnaryHandler(
		ShoppingListServiceRemoveFromListProcedure,
		svc.RemoveFromList,
		opts...,
	)
	shoppingListServiceGetListHandler := connect_go.NewUnaryHandler(
		ShoppingListServiceGetListProcedure,
		svc.GetList,
		opts...,
	)
	shoppingListServiceMergeListHandler := connect_go.NewUnaryHandler(
		ShoppingListServiceMergeListProcedure,
		svc.MergeList,
		opts...,
	)
	return "/shopping.list.v1.ShoppingListService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ShoppingListServiceCreateListProcedure:
			shoppingListServiceCreateListHandler.ServeHTTP(w, r)
		case ShoppingListServiceCloneListProcedure:
			shoppingListServiceCloneListHandler.ServeHTTP(w, r)
		case ShoppingListServiceAddToListProcedure:
			shoppingListServiceAddToListHandler.ServeHTTP(w, r)
		case ShoppingListServiceRemoveFromListProcedure:
			shoppingListServiceRemoveFromListHandler.ServeHTTP(w, r)
		case ShoppingListServiceGetListProcedure:
			shoppingListServiceGetListHandler.ServeHTTP(w, r)
		case ShoppingListServiceMergeListProcedure:
			shoppingListServiceMergeListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedShoppingListServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedShoppingListServiceHandler struct{}

func (UnimplementedShoppingListServiceHandler) CreateList(context.Context, *connect_go.Request[v1.CreateListRequest]) (*connect_go.Response[v1.CreateListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("shopping.list.v1.ShoppingListService.CreateList is not implemented"))
}

func (UnimplementedShoppingListServiceHandler) CloneList(context.Context, *connect_go.Request[v1.CloneListRequest]) (*connect_go.Response[v1.CloneListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("shopping.list.v1.ShoppingListService.CloneList is not implemented"))
}

func (UnimplementedShoppingListServiceHandler) AddToList(context.Context, *connect_go.Request[v1.AddToListRequest]) (*connect_go.Response[v1.AddToListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("shopping.list.v1.ShoppingListService.AddToList is not implemented"))
}

func (UnimplementedShoppingListServiceHandler) RemoveFromList(context.Context, *connect_go.Request[v1.RemoveFromListRequest]) (*connect_go.Response[v1.RemoveFromListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("shopping.list.v1.ShoppingListService.RemoveFromList is not implemented"))
}

func (UnimplementedShoppingListServiceHandler) GetList(context.Context, *connect_go.Request[v1.GetListRequest]) (*connect_go.Response[v1.GetListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("shopping.list.v1.ShoppingListService.GetList is not implemented"))
}

func (UnimplementedShoppingListServiceHandler) MergeList(context.Context, *connect_go.Request[v1.MergeListRequest]) (*connect_go.Response[v1.MergeListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("shopping.list.v1.ShoppingListService.MergeList is not implemented"))
}
