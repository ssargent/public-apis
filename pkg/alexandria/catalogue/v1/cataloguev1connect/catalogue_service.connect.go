// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: alexandria/catalogue/v1/catalogue_service.proto

package cataloguev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/ssargent/apis/pkg/alexandria/catalogue/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// CatalogueServiceName is the fully-qualified name of the CatalogueService service.
	CatalogueServiceName = "alexandria.catalogue.v1.CatalogueService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CatalogueServiceCreateRoomProcedure is the fully-qualified name of the CatalogueService's
	// CreateRoom RPC.
	CatalogueServiceCreateRoomProcedure = "/alexandria.catalogue.v1.CatalogueService/CreateRoom"
	// CatalogueServiceCreateItemProcedure is the fully-qualified name of the CatalogueService's
	// CreateItem RPC.
	CatalogueServiceCreateItemProcedure = "/alexandria.catalogue.v1.CatalogueService/CreateItem"
	// CatalogueServiceCreateShelfProcedure is the fully-qualified name of the CatalogueService's
	// CreateShelf RPC.
	CatalogueServiceCreateShelfProcedure = "/alexandria.catalogue.v1.CatalogueService/CreateShelf"
	// CatalogueServiceMoveItemProcedure is the fully-qualified name of the CatalogueService's MoveItem
	// RPC.
	CatalogueServiceMoveItemProcedure = "/alexandria.catalogue.v1.CatalogueService/MoveItem"
	// CatalogueServiceSearchProcedure is the fully-qualified name of the CatalogueService's Search RPC.
	CatalogueServiceSearchProcedure = "/alexandria.catalogue.v1.CatalogueService/Search"
)

// CatalogueServiceClient is a client for the alexandria.catalogue.v1.CatalogueService service.
type CatalogueServiceClient interface {
	CreateRoom(context.Context, *connect_go.Request[v1.CreateRoomRequest]) (*connect_go.Response[v1.CreateRoomResponse], error)
	CreateItem(context.Context, *connect_go.Request[v1.CreateItemRequest]) (*connect_go.Response[v1.CreateItemResponse], error)
	CreateShelf(context.Context, *connect_go.Request[v1.CreateShelfRequest]) (*connect_go.Response[v1.CreateShelfResponse], error)
	MoveItem(context.Context, *connect_go.Request[v1.MoveItemRequest]) (*connect_go.Response[v1.MoveItemResponse], error)
	Search(context.Context, *connect_go.Request[v1.SearchRequest]) (*connect_go.Response[v1.SearchResponse], error)
}

// NewCatalogueServiceClient constructs a client for the alexandria.catalogue.v1.CatalogueService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCatalogueServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) CatalogueServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &catalogueServiceClient{
		createRoom: connect_go.NewClient[v1.CreateRoomRequest, v1.CreateRoomResponse](
			httpClient,
			baseURL+CatalogueServiceCreateRoomProcedure,
			opts...,
		),
		createItem: connect_go.NewClient[v1.CreateItemRequest, v1.CreateItemResponse](
			httpClient,
			baseURL+CatalogueServiceCreateItemProcedure,
			opts...,
		),
		createShelf: connect_go.NewClient[v1.CreateShelfRequest, v1.CreateShelfResponse](
			httpClient,
			baseURL+CatalogueServiceCreateShelfProcedure,
			opts...,
		),
		moveItem: connect_go.NewClient[v1.MoveItemRequest, v1.MoveItemResponse](
			httpClient,
			baseURL+CatalogueServiceMoveItemProcedure,
			opts...,
		),
		search: connect_go.NewClient[v1.SearchRequest, v1.SearchResponse](
			httpClient,
			baseURL+CatalogueServiceSearchProcedure,
			opts...,
		),
	}
}

// catalogueServiceClient implements CatalogueServiceClient.
type catalogueServiceClient struct {
	createRoom  *connect_go.Client[v1.CreateRoomRequest, v1.CreateRoomResponse]
	createItem  *connect_go.Client[v1.CreateItemRequest, v1.CreateItemResponse]
	createShelf *connect_go.Client[v1.CreateShelfRequest, v1.CreateShelfResponse]
	moveItem    *connect_go.Client[v1.MoveItemRequest, v1.MoveItemResponse]
	search      *connect_go.Client[v1.SearchRequest, v1.SearchResponse]
}

// CreateRoom calls alexandria.catalogue.v1.CatalogueService.CreateRoom.
func (c *catalogueServiceClient) CreateRoom(ctx context.Context, req *connect_go.Request[v1.CreateRoomRequest]) (*connect_go.Response[v1.CreateRoomResponse], error) {
	return c.createRoom.CallUnary(ctx, req)
}

// CreateItem calls alexandria.catalogue.v1.CatalogueService.CreateItem.
func (c *catalogueServiceClient) CreateItem(ctx context.Context, req *connect_go.Request[v1.CreateItemRequest]) (*connect_go.Response[v1.CreateItemResponse], error) {
	return c.createItem.CallUnary(ctx, req)
}

// CreateShelf calls alexandria.catalogue.v1.CatalogueService.CreateShelf.
func (c *catalogueServiceClient) CreateShelf(ctx context.Context, req *connect_go.Request[v1.CreateShelfRequest]) (*connect_go.Response[v1.CreateShelfResponse], error) {
	return c.createShelf.CallUnary(ctx, req)
}

// MoveItem calls alexandria.catalogue.v1.CatalogueService.MoveItem.
func (c *catalogueServiceClient) MoveItem(ctx context.Context, req *connect_go.Request[v1.MoveItemRequest]) (*connect_go.Response[v1.MoveItemResponse], error) {
	return c.moveItem.CallUnary(ctx, req)
}

// Search calls alexandria.catalogue.v1.CatalogueService.Search.
func (c *catalogueServiceClient) Search(ctx context.Context, req *connect_go.Request[v1.SearchRequest]) (*connect_go.Response[v1.SearchResponse], error) {
	return c.search.CallUnary(ctx, req)
}

// CatalogueServiceHandler is an implementation of the alexandria.catalogue.v1.CatalogueService
// service.
type CatalogueServiceHandler interface {
	CreateRoom(context.Context, *connect_go.Request[v1.CreateRoomRequest]) (*connect_go.Response[v1.CreateRoomResponse], error)
	CreateItem(context.Context, *connect_go.Request[v1.CreateItemRequest]) (*connect_go.Response[v1.CreateItemResponse], error)
	CreateShelf(context.Context, *connect_go.Request[v1.CreateShelfRequest]) (*connect_go.Response[v1.CreateShelfResponse], error)
	MoveItem(context.Context, *connect_go.Request[v1.MoveItemRequest]) (*connect_go.Response[v1.MoveItemResponse], error)
	Search(context.Context, *connect_go.Request[v1.SearchRequest]) (*connect_go.Response[v1.SearchResponse], error)
}

// NewCatalogueServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCatalogueServiceHandler(svc CatalogueServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	catalogueServiceCreateRoomHandler := connect_go.NewUnaryHandler(
		CatalogueServiceCreateRoomProcedure,
		svc.CreateRoom,
		opts...,
	)
	catalogueServiceCreateItemHandler := connect_go.NewUnaryHandler(
		CatalogueServiceCreateItemProcedure,
		svc.CreateItem,
		opts...,
	)
	catalogueServiceCreateShelfHandler := connect_go.NewUnaryHandler(
		CatalogueServiceCreateShelfProcedure,
		svc.CreateShelf,
		opts...,
	)
	catalogueServiceMoveItemHandler := connect_go.NewUnaryHandler(
		CatalogueServiceMoveItemProcedure,
		svc.MoveItem,
		opts...,
	)
	catalogueServiceSearchHandler := connect_go.NewUnaryHandler(
		CatalogueServiceSearchProcedure,
		svc.Search,
		opts...,
	)
	return "/alexandria.catalogue.v1.CatalogueService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CatalogueServiceCreateRoomProcedure:
			catalogueServiceCreateRoomHandler.ServeHTTP(w, r)
		case CatalogueServiceCreateItemProcedure:
			catalogueServiceCreateItemHandler.ServeHTTP(w, r)
		case CatalogueServiceCreateShelfProcedure:
			catalogueServiceCreateShelfHandler.ServeHTTP(w, r)
		case CatalogueServiceMoveItemProcedure:
			catalogueServiceMoveItemHandler.ServeHTTP(w, r)
		case CatalogueServiceSearchProcedure:
			catalogueServiceSearchHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCatalogueServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCatalogueServiceHandler struct{}

func (UnimplementedCatalogueServiceHandler) CreateRoom(context.Context, *connect_go.Request[v1.CreateRoomRequest]) (*connect_go.Response[v1.CreateRoomResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("alexandria.catalogue.v1.CatalogueService.CreateRoom is not implemented"))
}

func (UnimplementedCatalogueServiceHandler) CreateItem(context.Context, *connect_go.Request[v1.CreateItemRequest]) (*connect_go.Response[v1.CreateItemResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("alexandria.catalogue.v1.CatalogueService.CreateItem is not implemented"))
}

func (UnimplementedCatalogueServiceHandler) CreateShelf(context.Context, *connect_go.Request[v1.CreateShelfRequest]) (*connect_go.Response[v1.CreateShelfResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("alexandria.catalogue.v1.CatalogueService.CreateShelf is not implemented"))
}

func (UnimplementedCatalogueServiceHandler) MoveItem(context.Context, *connect_go.Request[v1.MoveItemRequest]) (*connect_go.Response[v1.MoveItemResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("alexandria.catalogue.v1.CatalogueService.MoveItem is not implemented"))
}

func (UnimplementedCatalogueServiceHandler) Search(context.Context, *connect_go.Request[v1.SearchRequest]) (*connect_go.Response[v1.SearchResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("alexandria.catalogue.v1.CatalogueService.Search is not implemented"))
}
