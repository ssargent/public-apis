// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: bbq/intake/v1/bbq.proto

package intakev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Sensor struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Manufacturer    string                 `protobuf:"bytes,2,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	SensorCount     int32                  `protobuf:"varint,3,opt,name=sensor_count,json=sensorCount,proto3" json:"sensor_count,omitempty"`
	TemperatureUnit string                 `protobuf:"bytes,4,opt,name=temperature_unit,json=temperatureUnit,proto3" json:"temperature_unit,omitempty"`
	SensorId        string                 `protobuf:"bytes,5,opt,name=sensor_id,json=sensorId,proto3" json:"sensor_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Sensor) Reset() {
	*x = Sensor{}
	mi := &file_bbq_intake_v1_bbq_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sensor) ProtoMessage() {}

func (x *Sensor) ProtoReflect() protoreflect.Message {
	mi := &file_bbq_intake_v1_bbq_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sensor.ProtoReflect.Descriptor instead.
func (*Sensor) Descriptor() ([]byte, []int) {
	return file_bbq_intake_v1_bbq_proto_rawDescGZIP(), []int{0}
}

func (x *Sensor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sensor) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *Sensor) GetSensorCount() int32 {
	if x != nil {
		return x.SensorCount
	}
	return 0
}

func (x *Sensor) GetTemperatureUnit() string {
	if x != nil {
		return x.TemperatureUnit
	}
	return ""
}

func (x *Sensor) GetSensorId() string {
	if x != nil {
		return x.SensorId
	}
	return ""
}

type SensorReading struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SensorNumber  int32                  `protobuf:"varint,1,opt,name=sensor_number,json=sensorNumber,proto3" json:"sensor_number,omitempty"`
	Temperature   float32                `protobuf:"fixed32,2,opt,name=temperature,proto3" json:"temperature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SensorReading) Reset() {
	*x = SensorReading{}
	mi := &file_bbq_intake_v1_bbq_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorReading) ProtoMessage() {}

func (x *SensorReading) ProtoReflect() protoreflect.Message {
	mi := &file_bbq_intake_v1_bbq_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorReading.ProtoReflect.Descriptor instead.
func (*SensorReading) Descriptor() ([]byte, []int) {
	return file_bbq_intake_v1_bbq_proto_rawDescGZIP(), []int{1}
}

func (x *SensorReading) GetSensorNumber() int32 {
	if x != nil {
		return x.SensorNumber
	}
	return 0
}

func (x *SensorReading) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

type Reading struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Readings      []*SensorReading       `protobuf:"bytes,2,rep,name=readings,proto3" json:"readings,omitempty"`
	RecordedAt    int64                  `protobuf:"varint,3,opt,name=recorded_at,json=recordedAt,proto3" json:"recorded_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reading) Reset() {
	*x = Reading{}
	mi := &file_bbq_intake_v1_bbq_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reading) ProtoMessage() {}

func (x *Reading) ProtoReflect() protoreflect.Message {
	mi := &file_bbq_intake_v1_bbq_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reading.ProtoReflect.Descriptor instead.
func (*Reading) Descriptor() ([]byte, []int) {
	return file_bbq_intake_v1_bbq_proto_rawDescGZIP(), []int{2}
}

func (x *Reading) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *Reading) GetReadings() []*SensorReading {
	if x != nil {
		return x.Readings
	}
	return nil
}

func (x *Reading) GetRecordedAt() int64 {
	if x != nil {
		return x.RecordedAt
	}
	return 0
}

type SessionDataRate struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Sensors           int32                  `protobuf:"varint,1,opt,name=sensors,proto3" json:"sensors,omitempty"`
	MaxReadingsMinute int32                  `protobuf:"varint,2,opt,name=max_readings_minute,json=maxReadingsMinute,proto3" json:"max_readings_minute,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SessionDataRate) Reset() {
	*x = SessionDataRate{}
	mi := &file_bbq_intake_v1_bbq_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionDataRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionDataRate) ProtoMessage() {}

func (x *SessionDataRate) ProtoReflect() protoreflect.Message {
	mi := &file_bbq_intake_v1_bbq_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionDataRate.ProtoReflect.Descriptor instead.
func (*SessionDataRate) Descriptor() ([]byte, []int) {
	return file_bbq_intake_v1_bbq_proto_rawDescGZIP(), []int{3}
}

func (x *SessionDataRate) GetSensors() int32 {
	if x != nil {
		return x.Sensors
	}
	return 0
}

func (x *SessionDataRate) GetMaxReadingsMinute() int32 {
	if x != nil {
		return x.MaxReadingsMinute
	}
	return 0
}

type SensorAlert struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	SensorId      string                 `protobuf:"bytes,2,opt,name=sensor_id,json=sensorId,proto3" json:"sensor_id,omitempty"`
	AlertName     string                 `protobuf:"bytes,3,opt,name=alert_name,json=alertName,proto3" json:"alert_name,omitempty"`
	DefaultAlert  bool                   `protobuf:"varint,4,opt,name=default_alert,json=defaultAlert,proto3" json:"default_alert,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SensorAlert) Reset() {
	*x = SensorAlert{}
	mi := &file_bbq_intake_v1_bbq_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorAlert) ProtoMessage() {}

func (x *SensorAlert) ProtoReflect() protoreflect.Message {
	mi := &file_bbq_intake_v1_bbq_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorAlert.ProtoReflect.Descriptor instead.
func (*SensorAlert) Descriptor() ([]byte, []int) {
	return file_bbq_intake_v1_bbq_proto_rawDescGZIP(), []int{4}
}

func (x *SensorAlert) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *SensorAlert) GetSensorId() string {
	if x != nil {
		return x.SensorId
	}
	return ""
}

func (x *SensorAlert) GetAlertName() string {
	if x != nil {
		return x.AlertName
	}
	return ""
}

func (x *SensorAlert) GetDefaultAlert() bool {
	if x != nil {
		return x.DefaultAlert
	}
	return false
}

type SensorAlertRule struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SensorAlertId  string                 `protobuf:"bytes,1,opt,name=sensor_alert_id,json=sensorAlertId,proto3" json:"sensor_alert_id,omitempty"`
	SensorNumber   int32                  `protobuf:"varint,2,opt,name=sensor_number,json=sensorNumber,proto3" json:"sensor_number,omitempty"`
	MinTemperature float32                `protobuf:"fixed32,3,opt,name=min_temperature,json=minTemperature,proto3" json:"min_temperature,omitempty"`
	MaxTemperature float32                `protobuf:"fixed32,4,opt,name=max_temperature,json=maxTemperature,proto3" json:"max_temperature,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SensorAlertRule) Reset() {
	*x = SensorAlertRule{}
	mi := &file_bbq_intake_v1_bbq_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorAlertRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorAlertRule) ProtoMessage() {}

func (x *SensorAlertRule) ProtoReflect() protoreflect.Message {
	mi := &file_bbq_intake_v1_bbq_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorAlertRule.ProtoReflect.Descriptor instead.
func (*SensorAlertRule) Descriptor() ([]byte, []int) {
	return file_bbq_intake_v1_bbq_proto_rawDescGZIP(), []int{5}
}

func (x *SensorAlertRule) GetSensorAlertId() string {
	if x != nil {
		return x.SensorAlertId
	}
	return ""
}

func (x *SensorAlertRule) GetSensorNumber() int32 {
	if x != nil {
		return x.SensorNumber
	}
	return 0
}

func (x *SensorAlertRule) GetMinTemperature() float32 {
	if x != nil {
		return x.MinTemperature
	}
	return 0
}

func (x *SensorAlertRule) GetMaxTemperature() float32 {
	if x != nil {
		return x.MaxTemperature
	}
	return 0
}

type Session struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DeviceId      string                 `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	DesiredState  string                 `protobuf:"bytes,3,opt,name=desired_state,json=desiredState,proto3" json:"desired_state,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	StartTime     int64                  `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       *int64                 `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	SensorId      string                 `protobuf:"bytes,7,opt,name=sensor_id,json=sensorId,proto3" json:"sensor_id,omitempty"`
	SessionType   string                 `protobuf:"bytes,8,opt,name=session_type,json=sessionType,proto3" json:"session_type,omitempty"`
	SubjectId     string                 `protobuf:"bytes,9,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	SensorAlertId *string                `protobuf:"bytes,10,opt,name=sensor_alert_id,json=sensorAlertId,proto3,oneof" json:"sensor_alert_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Session) Reset() {
	*x = Session{}
	mi := &file_bbq_intake_v1_bbq_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_bbq_intake_v1_bbq_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_bbq_intake_v1_bbq_proto_rawDescGZIP(), []int{6}
}

func (x *Session) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Session) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *Session) GetDesiredState() string {
	if x != nil {
		return x.DesiredState
	}
	return ""
}

func (x *Session) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Session) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Session) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *Session) GetSensorId() string {
	if x != nil {
		return x.SensorId
	}
	return ""
}

func (x *Session) GetSessionType() string {
	if x != nil {
		return x.SessionType
	}
	return ""
}

func (x *Session) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

func (x *Session) GetSensorAlertId() string {
	if x != nil && x.SensorAlertId != nil {
		return *x.SensorAlertId
	}
	return ""
}

var File_bbq_intake_v1_bbq_proto protoreflect.FileDescriptor

const file_bbq_intake_v1_bbq_proto_rawDesc = "" +
	"\n" +
	"\x17bbq/intake/v1/bbq.proto\x12\rbbq.intake.v1\"\xab\x01\n" +
	"\x06Sensor\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\"\n" +
	"\fmanufacturer\x18\x02 \x01(\tR\fmanufacturer\x12!\n" +
	"\fsensor_count\x18\x03 \x01(\x05R\vsensorCount\x12)\n" +
	"\x10temperature_unit\x18\x04 \x01(\tR\x0ftemperatureUnit\x12\x1b\n" +
	"\tsensor_id\x18\x05 \x01(\tR\bsensorId\"V\n" +
	"\rSensorReading\x12#\n" +
	"\rsensor_number\x18\x01 \x01(\x05R\fsensorNumber\x12 \n" +
	"\vtemperature\x18\x02 \x01(\x02R\vtemperature\"\x83\x01\n" +
	"\aReading\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x128\n" +
	"\breadings\x18\x02 \x03(\v2\x1c.bbq.intake.v1.SensorReadingR\breadings\x12\x1f\n" +
	"\vrecorded_at\x18\x03 \x01(\x03R\n" +
	"recordedAt\"[\n" +
	"\x0fSessionDataRate\x12\x18\n" +
	"\asensors\x18\x01 \x01(\x05R\asensors\x12.\n" +
	"\x13max_readings_minute\x18\x02 \x01(\x05R\x11maxReadingsMinute\"\x8a\x01\n" +
	"\vSensorAlert\x12\x13\n" +
	"\x02id\x18\x01 \x01(\tH\x00R\x02id\x88\x01\x01\x12\x1b\n" +
	"\tsensor_id\x18\x02 \x01(\tR\bsensorId\x12\x1d\n" +
	"\n" +
	"alert_name\x18\x03 \x01(\tR\talertName\x12#\n" +
	"\rdefault_alert\x18\x04 \x01(\bR\fdefaultAlertB\x05\n" +
	"\x03_id\"\xb0\x01\n" +
	"\x0fSensorAlertRule\x12&\n" +
	"\x0fsensor_alert_id\x18\x01 \x01(\tR\rsensorAlertId\x12#\n" +
	"\rsensor_number\x18\x02 \x01(\x05R\fsensorNumber\x12'\n" +
	"\x0fmin_temperature\x18\x03 \x01(\x02R\x0eminTemperature\x12'\n" +
	"\x0fmax_temperature\x18\x04 \x01(\x02R\x0emaxTemperature\"\xe9\x02\n" +
	"\aSession\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tdevice_id\x18\x02 \x01(\tR\bdeviceId\x12#\n" +
	"\rdesired_state\x18\x03 \x01(\tR\fdesiredState\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12\x1d\n" +
	"\n" +
	"start_time\x18\x05 \x01(\x03R\tstartTime\x12\x1e\n" +
	"\bend_time\x18\x06 \x01(\x03H\x00R\aendTime\x88\x01\x01\x12\x1b\n" +
	"\tsensor_id\x18\a \x01(\tR\bsensorId\x12!\n" +
	"\fsession_type\x18\b \x01(\tR\vsessionType\x12\x1d\n" +
	"\n" +
	"subject_id\x18\t \x01(\tR\tsubjectId\x12+\n" +
	"\x0fsensor_alert_id\x18\n" +
	" \x01(\tH\x01R\rsensorAlertId\x88\x01\x01B\v\n" +
	"\t_end_timeB\x12\n" +
	"\x10_sensor_alert_idB\xaf\x01\n" +
	"\x11com.bbq.intake.v1B\bBbqProtoP\x01Z:github.com/ssargent/public-apis/pkg/bbq/intake/v1;intakev1\xa2\x02\x03BIX\xaa\x02\rBbq.Intake.V1\xca\x02\rBbq\\Intake\\V1\xe2\x02\x19Bbq\\Intake\\V1\\GPBMetadata\xea\x02\x0fBbq::Intake::V1b\x06proto3"

var (
	file_bbq_intake_v1_bbq_proto_rawDescOnce sync.Once
	file_bbq_intake_v1_bbq_proto_rawDescData []byte
)

func file_bbq_intake_v1_bbq_proto_rawDescGZIP() []byte {
	file_bbq_intake_v1_bbq_proto_rawDescOnce.Do(func() {
		file_bbq_intake_v1_bbq_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_bbq_intake_v1_bbq_proto_rawDesc), len(file_bbq_intake_v1_bbq_proto_rawDesc)))
	})
	return file_bbq_intake_v1_bbq_proto_rawDescData
}

var file_bbq_intake_v1_bbq_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_bbq_intake_v1_bbq_proto_goTypes = []any{
	(*Sensor)(nil),          // 0: bbq.intake.v1.Sensor
	(*SensorReading)(nil),   // 1: bbq.intake.v1.SensorReading
	(*Reading)(nil),         // 2: bbq.intake.v1.Reading
	(*SessionDataRate)(nil), // 3: bbq.intake.v1.SessionDataRate
	(*SensorAlert)(nil),     // 4: bbq.intake.v1.SensorAlert
	(*SensorAlertRule)(nil), // 5: bbq.intake.v1.SensorAlertRule
	(*Session)(nil),         // 6: bbq.intake.v1.Session
}
var file_bbq_intake_v1_bbq_proto_depIdxs = []int32{
	1, // 0: bbq.intake.v1.Reading.readings:type_name -> bbq.intake.v1.SensorReading
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_bbq_intake_v1_bbq_proto_init() }
func file_bbq_intake_v1_bbq_proto_init() {
	if File_bbq_intake_v1_bbq_proto != nil {
		return
	}
	file_bbq_intake_v1_bbq_proto_msgTypes[4].OneofWrappers = []any{}
	file_bbq_intake_v1_bbq_proto_msgTypes[6].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_bbq_intake_v1_bbq_proto_rawDesc), len(file_bbq_intake_v1_bbq_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bbq_intake_v1_bbq_proto_goTypes,
		DependencyIndexes: file_bbq_intake_v1_bbq_proto_depIdxs,
		MessageInfos:      file_bbq_intake_v1_bbq_proto_msgTypes,
	}.Build()
	File_bbq_intake_v1_bbq_proto = out.File
	file_bbq_intake_v1_bbq_proto_goTypes = nil
	file_bbq_intake_v1_bbq_proto_depIdxs = nil
}
